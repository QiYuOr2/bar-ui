import{b as t,c as e,d as l,z as n,s as i,r as d,a as s,t as a,e as r,h as f,x as o,F as g,A as x}from"./index.05c7536a.js";import{n as y}from"./index.6c520161.js";const h={class:"markdown-body"},c={class:"language-html"},u=i('<h2>API</h2><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">可选值</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">finished</td><td style="text-align:left;">加载是否完成</td><td style="text-align:left;">boolean</td><td style="text-align:left;"></td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">offset</td><td style="text-align:left;">距离底边多少距离开始加载</td><td style="text-align:left;">number</td><td style="text-align:left;"></td><td style="text-align:left;">300</td></tr><tr><td style="text-align:left;">height</td><td style="text-align:left;">盒子高度，如果不是监听 window 的滚动条加载，则需要写高度</td><td style="text-align:left;"></td><td style="text-align:left;">string|number</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">loading-text</td><td style="text-align:left;">加载中的文字</td><td style="text-align:left;">string</td><td style="text-align:left;"></td><td style="text-align:left;">加载中…</td></tr><tr><td style="text-align:left;">finished-text</td><td style="text-align:left;">加载完成的文字</td><td style="text-align:left;">string</td><td style="text-align:left;"></td><td style="text-align:left;">加载完成</td></tr><tr><td style="text-align:left;">error-text</td><td style="text-align:left;">加载出错的文字</td><td style="text-align:left;">string</td><td style="text-align:left;"></td><td style="text-align:left;">加载出错</td></tr><tr><td style="text-align:left;">inWindow</td><td style="text-align:left;">是否监听 window 的滚动条</td><td style="text-align:left;">boolean</td><td style="text-align:left;"></td><td style="text-align:left;">false</td></tr></tbody></table><h2>Events</h2><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">函数签名</th></tr></thead><tbody><tr><td style="text-align:left;">load</td><td style="text-align:left;">加载函数</td><td style="text-align:left;">() =&gt; Promise&lt;<code>any</code>&gt;</td></tr></tbody></table><h2>Slots</h2><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">finished</td><td style="text-align:left;">加载中的文字</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">加载完成的文字</td></tr><tr><td style="text-align:left;">loading</td><td style="text-align:left;">加载出错的文字</td></tr></tbody></table>',6),m={expose:[],setup:i=>(i,d)=>(t(),e("div",h,[l("pre",null,[l("code",c,'<template>\n  <div>\n    <bar-infinite-scroll @load="load" :height="200" :finished="finished">\n      <div class="scroll-card" v-for="(item, index) in list" :key="index">\n        '+n(i.item)+"\n      </div>\n    </bar-infinite-scroll>\n  </div>\n</template>\n\n<script>\n  import { ref } from 'vue';\n  import { InfiniteScroll } from 'bar-ui';\n\n  export default {\n    components: {\n      [InfiniteScroll.name]: InfiniteScroll,\n    },\n    setup() {\n      const list = ref([]);\n      const finished = ref(false);\n      const load = () => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            const n = list.value.length;\n            if (n >= 60) {\n              finished.value = true;\n              return resolve();\n            }\n            for (let i = n + 1; i <= n + 20; i++) {\n              list.value.push(i);\n            }\n            resolve();\n          }, 1000);\n        });\n      };\n      return { list, finished, load };\n    },\n  };\n<\/script>\n",1)]),u]))};const b={components:{[y.name]:y,md:m},setup(){const t=d([]),e=d(!1);return{list:t,finished:e,load:()=>new Promise((l=>{setTimeout((()=>{const n=t.value.length;if(n>=60)return e.value=!0,l();for(let e=n+1;e<=n+20;e++)t.value.push(e);l()}),1e3)}))}}},p={class:"infinite-container"},v=l("h2",null,"infinite-scroll 无限列表组件",-1),w=o("      "),I=o("\n    ");b.render=function(i,d,o,y,h,c){const u=s("bar-infinite-scroll"),m=s("md"),b=a("highlightjs");return t(),e("div",p,[v,l(u,{onLoad:y.load,height:200,finished:y.finished},{default:r((()=>[(t(!0),e(g,null,x(y.list,((l,i)=>(t(),e("div",{class:"scroll-card",key:i},n(l),1)))),128))])),_:1},8,["onLoad","finished"]),f(l("pre",null,[w,l(m),I],512),[[b]])])};export default b;
